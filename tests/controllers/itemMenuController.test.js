const request = require('supertest')
const { app } = require('../../src/app')
const itemMenuService = require('../../src/services/itemMenuService')
jest.mock('../../src/services/itemMenuService')
const { generateTokenForTesting } = require('../utils')

describe('itemMenuController', () => {
    let authToken

    beforeEach(() => {
        authToken = `Bearer ${generateTokenForTesting()}`
    })

    describe('POST /api/itemsMenu', () => {
        it('should create a new itemMenu', async () => {
            const itemData = {
                nombre: 'ItemMenu1',
                descripcion: 'ItemMenu1 description',
                precio: 100,
                imagen: '',
                grupoId: 1,
                porUnidad: true,
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
            }

            itemMenuService.crearItemMenu.mockResolvedValue({
                id: 1,
                nombre: 'ItemMenu1',
                descripcion: 'ItemMenu1 description',
                precio: 100,
                imagen: '',
                grupoId: 1,
                porUnidad: true,
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
            })

            const res = await request(app)
                .post('/api/itemsMenu')
                .set('Authorization', authToken)
                .send(itemData)
            expect(res.statusCode).toEqual(201)
            expect(res.body).toHaveProperty('message', 'ItemMenu creado')
            // ...verifica más propiedades según sea necesario...
        })

        //Test donde se envian items inventario repetidos
        it('should return an error when items inventario are repeated', async () => {
            const itemData = {
                /* Datos del itemMenu */ nombre: 'ItemMenu 1',
                descripcion: 'Descripción del ItemMenu 1',
                precio: 100,
                grupoId: 1,
                porUnidad: true,
                imagen: '',
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 1,
                    },
                ],
            }

            const res = await request(app)
                .post('/api/itemsMenu')
                .set('Authorization', authToken)
                .send(itemData)
            expect(res.statusCode).toEqual(400)
            expect(res.body).toHaveProperty(
                'message',
                'El array de itemsInventario contiene ids repetidos'
            )
        })
        // ... Agrega más pruebas para casos de error, como datos inválidos ...
    })

    describe('GET /api/itemsMenu', () => {
        it('should retrieve a list of itemMenus with pagination', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },
                {
                    /* Datos del segundo itemMenu */ id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenu.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu?page=1&limit=10')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(itemMenuService.getItemsMenu).toHaveBeenCalledWith(
                expect.objectContaining({
                    page: 1,
                    limit: 10,
                })
            )
        })

        //get por grupoId
        it('should retrieve a list of itemMenus with pagination by grupoId', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },
                {
                    /* Datos del segundo itemMenu */ id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenu.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu?grupoId=1')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(itemMenuService.getItemsMenu).toHaveBeenCalledWith(
                expect.objectContaining({
                    grupoId: [1],
                })
            )
        })

        // ... Agrega pruebas adicionales para verificar el filtrado por nombre, grupoId, etc. ...
    })

    describe('GET /api/itemsMenu/activos', () => {
        it('should retrieve a list of itemMenus activos with pagination', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },

                {
                    /* Datos del segundo itemMenu */

                    id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenuActivos.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu/activos?page=1&limit=10')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(itemMenuService.getItemsMenuActivos).toHaveBeenCalledWith(
                expect.objectContaining({
                    page: 1,
                    limit: 10,
                })
            )
        })

        //get por grupoId
        it('should retrieve a list of itemMenus activos with pagination by grupoId', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },

                {
                    /* Datos del segundo itemMenu */

                    id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenuActivos.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu/activos?grupoId=1')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(itemMenuService.getItemsMenuActivos).toHaveBeenCalledWith(
                expect.objectContaining({
                    grupoId: [1],
                })
            )
        })
    })

    describe('GET /api/itemsMenu/activos/basic', () => {
        it('should retrieve a list of itemMenus activos with pagination', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },

                {
                    /* Datos del segundo itemMenu */

                    id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenuActivosBasic.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu/activos/basic?page=1&limit=10')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(
                itemMenuService.getItemsMenuActivosBasic
            ).toHaveBeenCalledWith(
                expect.objectContaining({
                    page: 1,
                    limit: 10,
                })
            )
        })

        //get por grupoId
        it('should retrieve a list of itemMenus activos with pagination by grupoId', async () => {
            const mockItemMenus = [
                {
                    /* Datos del primer itemMenu */ id: 1,
                    nombre: 'ItemMenu 1',
                    descripcion: 'Descripción del ItemMenu 1',
                    precio: 100,
                    imagen: 'imagen1.jpg',
                    grupoId: 1,
                    porUnidad: true,
                    itemsInventario: [
                        {
                            id: 1,
                        },
                        {
                            id: 2,
                        },
                    ],
                },

                {
                    /* Datos del segundo itemMenu */

                    id: 2,
                    nombre: 'ItemMenu 2',
                    descripcion: 'Descripción del ItemMenu 2',
                    precio: 200,
                    imagen: 'imagen2.jpg',
                    grupoId: 2,
                    porUnidad: false,
                    itemsInventario: [
                        {
                            id: 3,
                        },
                        {
                            id: 4,
                        },
                    ],
                },
                // ... más itemsMenu ...
            ]
            itemMenuService.getItemsMenuActivosBasic.mockResolvedValue({
                items: mockItemMenus,
                total: mockItemMenus.length,
                page: 1,
                limit: 10,
            })

            const res = await request(app)
                .get('/api/itemsMenu/activos/basic?grupoId=1')
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('items')
            expect(res.body.items.length).toBeLessThanOrEqual(10)
            expect(
                itemMenuService.getItemsMenuActivosBasic
            ).toHaveBeenCalledWith(
                expect.objectContaining({
                    grupoId: [1],
                })
            )
        })
    })

    /*
    Test para:
    router.get(
    '/itemsMenu/:id/itemsMenuInventario',
    auth([ROLES.ADMIN]),
    itemMenuController.getItemMenuInventarioById
)
    */

    describe('GET /api/itemsMenu/:id/itemsMenuInventario', () => {
        it('should retrieve a list of itemsMenuInventario by itemMenuId', async () => {
            const itemMenuId = '1'
            const mockItemsMenuInventario = [
                {
                    /* Datos del primer itemMenuInventario */ id: 1,
                    itemMenuId: 1,
                    itemInventarioId: 1,
                    cantidad: 1,
                },
                {
                    /* Datos del segundo itemMenuInventario */ id: 2,
                    itemMenuId: 1,
                    itemInventarioId: 2,
                    cantidad: 2,
                },
                // ... más itemsMenuInventario ...
            ]
            itemMenuService.getItemMenuInventarioById.mockResolvedValue(
                mockItemsMenuInventario
            )

            const res = await request(app)
                .get(`/api/itemsMenu/${itemMenuId}/itemsMenuInventario`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toEqual(mockItemsMenuInventario)
            expect(
                itemMenuService.getItemMenuInventarioById
            ).toHaveBeenCalledWith(itemMenuId)
        })

        it('should return an error when itemMenu with specified ID does not exist', async () => {
            const itemMenuId = '999'
            itemMenuService.getItemMenuInventarioById.mockResolvedValue(null)

            const res = await request(app)
                .get(`/api/itemsMenu/${itemMenuId}/itemsMenuInventario`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    /*
    Test para:
   router.patch(
    '/itemsMenu/:id/activate',
    auth([ROLES.ADMIN]),
    itemMenuController.activateItemMenu
)
    */
    describe('PATCH /api/itemsMenu/:id/activate', () => {
        it('should activate an itemMenu', async () => {
            const itemMenuId = '1'
            itemMenuService.activateItemMenu.mockResolvedValue(1)

            const res = await request(app)
                .patch(`/api/itemsMenu/${itemMenuId}/activate`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('message', 'ItemMenu activado')
            expect(itemMenuService.activateItemMenu).toHaveBeenCalledWith(
                itemMenuId
            )
        })

        it('should return an error when itemMenu to activate does not exist', async () => {
            const itemMenuId = '999'
            itemMenuService.activateItemMenu.mockResolvedValue(0)

            const res = await request(app)
                .patch(`/api/itemsMenu/${itemMenuId}/activate`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    /*
    Test para:
    router.put(
    '/itemsMenu/:id/removeItemsInventario',
    auth([ROLES.ADMIN]),
    validate(updateItemsMenuInventarioSchema),
    itemMenuController.removeItemsInventario
)
    */
    describe('PUT /api/itemsMenu/:id/removeItemsInventario', () => {
        it('should remove itemsInventario from an itemMenu', async () => {
            const itemMenuId = '1'
            const updateData = {
                /* Datos para actualizar */
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
                porUnidad: true,
            }
            itemMenuService.removeItemsInventario.mockResolvedValue([1]) // Suponemos que devuelve la cantidad de registros actualizados

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}/removeItemsInventario`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('message', 'ItemMenu actualizado')
            expect(itemMenuService.removeItemsInventario).toHaveBeenCalledWith(
                itemMenuId,
                updateData
            )
        })

        it('should return an error when itemMenu to update does not exist', async () => {
            const itemMenuId = '999'
            const updateData = {
                /* Datos para actualizar */
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
                porUnidad: true,
            }
            itemMenuService.removeItemsInventario.mockResolvedValue(null)

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}/removeItemsInventario`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })
    /*
    Test para:
    router.put(
    '/itemsMenu/:id/addItemsInventario',
    auth([ROLES.ADMIN]),
    validate(updateItemsMenuInventarioSchema),
    itemMenuController.addItemsInventario
)

    */
    describe('PUT /api/itemsMenu/:id/addItemsInventario', () => {
        it('should add itemsInventario to an itemMenu', async () => {
            const itemMenuId = '1'
            const updateData = {
                /* Datos para actualizar */
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
                porUnidad: true,
            }
            itemMenuService.addItemsInventario.mockResolvedValue([1]) // Suponemos que devuelve la cantidad de registros actualizados

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}/addItemsInventario`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('message', 'ItemMenu actualizado')
            expect(itemMenuService.addItemsInventario).toHaveBeenCalledWith(
                itemMenuId,
                updateData
            )
        })

        it('should return an error when itemMenu to update does not exist', async () => {
            const itemMenuId = '999'
            const updateData = {
                /* Datos para actualizar */
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
                porUnidad: true,
            }
            itemMenuService.addItemsInventario.mockResolvedValue(null)

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}/addItemsInventario`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    describe('GET /api/itemsMenu/:id', () => {
        it('should retrieve a specific itemMenu by ID', async () => {
            const itemMenuId = '1'
            const mockItemMenu = {
                /* Datos del itemMenu */ id: 1,
                nombre: 'ItemMenu 1',
                descripcion: 'Descripción del ItemMenu 1',
                precio: 100,
                imagen: 'imagen1.jpg',
                grupoId: 1,
                porUnidad: true,
                itemsInventario: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
            }

            itemMenuService.getItemMenuById.mockResolvedValue(mockItemMenu)

            const res = await request(app)
                .get(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toEqual(mockItemMenu)
            expect(itemMenuService.getItemMenuById).toHaveBeenCalledWith(
                itemMenuId
            )
        })

        it('should return an error when itemMenu with specified ID does not exist', async () => {
            const itemMenuId = '999'
            itemMenuService.getItemMenuById.mockResolvedValue(null)

            const res = await request(app)
                .get(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    describe('PUT /api/itemsMenu/:id', () => {
        it('should update an itemMenu', async () => {
            const itemMenuId = '1'
            const updateData = {
                /* Datos para actualizar */ nombre: 'itemmenu 1',
                descripcion: 'Descripción del ItemMenu 1',

                precio: 100,
                grupoId: 1,
            }
            itemMenuService.updateItemMenu.mockResolvedValue([1]) // Suponemos que devuelve la cantidad de registros actualizados

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('message', 'ItemMenu actualizado')
            expect(itemMenuService.updateItemMenu).toHaveBeenCalledWith(
                itemMenuId,
                updateData
            )
        })

        it('should return an error when itemMenu to update does not exist', async () => {
            const itemMenuId = '999'
            const updateData = {
                /* Datos para actualizar */ nombre: 'ItemMenu 1',
                descripcion: 'Descripción del ItemMenu 1',
                precio: 100,
                grupoId: 1,
            }
            itemMenuService.updateItemMenu.mockResolvedValue([0])

            const res = await request(app)
                .put(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)
                .send(updateData)
            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    describe('DELETE /api/itemsMenu/:id', () => {
        it('should delete an itemMenu', async () => {
            const itemMenuId = '1'
            itemMenuService.deleteItemMenu.mockResolvedValue(1)

            const res = await request(app)
                .delete(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(200)
            expect(res.body).toHaveProperty('message', 'ItemMenu desactivado')
            expect(itemMenuService.deleteItemMenu).toHaveBeenCalledWith(
                itemMenuId
            )
        })

        it('should return an error when itemMenu to delete does not exist', async () => {
            const itemMenuId = '999'
            itemMenuService.deleteItemMenu.mockResolvedValue(0)

            const res = await request(app)
                .delete(`/api/itemsMenu/${itemMenuId}`)
                .set('Authorization', authToken)

            expect(res.statusCode).toEqual(404)
            expect(res.body).toHaveProperty('message', 'ItemMenu no encontrado')
        })
    })

    // ... Continúa con pruebas para las demás rutas como activateItemMenu, removeItemsInventario, etc. ...

    afterEach(() => {
        jest.clearAllMocks()
    })
})
